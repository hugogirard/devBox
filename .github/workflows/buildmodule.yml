name: Build and deploy bicep modules

on:  
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - "iac/**/*"
  workflow_dispatch:

jobs:
  read-module-configuration:
    
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - id: prepare
        uses: ActionsTools/read-json-action@main
        with:
          file_path: ./iac/module.json
      
    outputs:
      modules: ${{ steps.prepare.outputs.modules }}
  
  deploy-bicep-modules:  

    needs: read-module-configuration
    runs-on: ubuntu-latest

    strategy:
      matrix:
        modules: ${{ fromJson(needs.read-module-configuration.outputs.modules) }}
    
    steps:

      - uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}           
      
      - name: deploy modules
        run: |
          bicep publish ${{ matrix.modules.file }} --target br:${{ secrets.ACR_LOGIN_SERVER_NAME }}/${{ matrix.modules.name}}:${{ matrix.modules.version }}

    # env:
    #   DEPLOYMENT_NAME: bicep-module
    #   LOCATION: ${{ secrets.LOCATION }}
    #   RG_NAME: ${{ secrets.SHARED_RESOURCE_GROUP_NAME }}
    #   WORKING_DIR: ./bicep/infraAdmin

    # runs-on: ubuntu-latest

    # steps:
      
    #   - uses: actions/checkout@v2

    #   - name: Azure Login
    #     uses: Azure/login@v1
    #     with:
    #       creds: ${{ secrets.AZURE_CREDENTIALS }}      

    #   - name: deploy
    #     id: createResources
    #     uses: azure/arm-deploy@v1
    #     with:
    #       subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
    #       scope: subscription
    #       region: ${{ env.LOCATION }}
    #       deploymentName:  ${{ env.DEPLOYMENT_NAME }}
    #       template: ${{ env.WORKING_DIR }}/main.bicep
    #       parameters: location=${{ env.LOCATION }} managementRgName=${{ env.RG_NAME }}

    #   - uses: gliech/create-github-secret-action@v1
    #     name: Write ACR Login Server
    #     with:
    #       name: ACR_LOGIN_SERVER_NAME
    #       value: ${{ steps.createResources.outputs.acrLoginServer }}
    #       pa_token: ${{ secrets.PA_TOKEN }}          
